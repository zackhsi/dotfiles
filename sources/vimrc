let mapleader = "\<Space>"         " Use space as leader
nnoremap <Leader>r :source $MYVIMRC<CR>

" Legacy settings.
if !has('nvim')
    set ai                         " auto indenting
    set autoread                   " reread file on focus
    set backspace=indent,eol,start " backspace over everything in insert mode
    set encoding=utf-8             " Set the default encodings just in case $LANG isn't set
    set laststatus=2               " grey status bar at the bottom
    set smarttab                   " be smart when using tabs
    set termencoding=utf-8         " Set the default encodings just in case $LANG isn't set
    set ttymouse=xterm2            " more mouse
    syntax enable                  " syntax highlighting
endif

set colorcolumn=80                 " line length matters
set foldmethod=manual              " set a foldmethod
set hidden
set mouse=a                        " enable mouse
set number                         " line numbers
set scrolloff=2                    " Always shows two lines of vertical context around the cursor
set undofile
set showcmd                        " show incomplete commands

set hlsearch                       " highlight what you search for
set ic                             " case insensitive search
set incsearch                      " type-ahead-find
set scs                            " smart case search
set inccommand=nosplit             " in-place substitution preview

set expandtab                      " use spaces instead of tabs
set shiftwidth=4                   " 1 tab == 2 spaces
set tabstop=4                      " 1 tab == 2 spaces

set splitbelow                     " all horizontal splits open to the bottom
set splitright                     " all vertical splits open to the right

set nobackup                       " no backup files
set noswapfile                     " no swap files
set nowritebackup                  " only in case you don't want a backup file while editing

" Restrict CursorLine to active window.
if $BACKGROUND == "light"
  let cursorlinenrfg = 4  " blue
else
  let cursorlinenrfg = 3  " yellow
endif
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * execute 'highlight CursorLineNr ctermfg=' . cursorlinenrfg
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

" Reset cursor to vertical line that does not blink.
au VimLeave * set guicursor=a:ver1-blinkon0

" Copy selection to system clipboard.
vnoremap <Leader>y "+y

" Copy current filepath to systen clipboard.
nnoremap <Leader>f :let @+ = expand("%")<CR>

" Double slash to search for visual selection.
" http://vim.wikia.com/wiki/Search_for_visually_selected_text
vnorem // y/<c-r>"<cr>

" Indentation.
filetype plugin indent on
autocmd Filetype bash       setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype ruby       setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype sh         setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype vim        setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype xml        setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype yaml       setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype zsh        setlocal tabstop=2 softtabstop=2 shiftwidth=2

" Python 88 lines.
autocmd Filetype python setlocal textwidth=88
autocmd Filetype python setlocal colorcolumn=89

" *.pyi stub files.
autocmd BufNewFile,BufRead *.pyi setfiletype python

" Detect tmux.conf, must be before *.conf.
autocmd BufNewFile,BufRead {.,}tmux*.conf* setfiletype tmux

" Detect ini files.
autocmd BufNewFile,BufRead *.ini,*.conf setf dosini

" Pipfile syntax highlighting.
autocmd BufNewFile,BufRead Pipfile set filetype=toml

" Pipfile.lock syntax highlighting.
autocmd BufNewFile,BufRead Pipfile.lock set filetype=json

" Typescript syntax highlighting.
autocmd BufNewFile,BufRead *.tsx set filetype=typescript

" Vagrantfile syntax highlighting.
autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby

" Reload edited files.
augroup improved_autoread
  autocmd FocusGained * checktime
  autocmd FocusGained * GitGutterAll
  autocmd BufEnter * checktime
  autocmd BufEnter * GitGutterAll
augroup end
noremap <c-z> :suspend<cr>:checktime<cr>:GitGutterAll<cr>

" Window navigation.
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> :<C-u>TmuxNavigateLeft<CR>
nmap <C-l> <C-w>l

" Move by screen lines.
noremap j gj
noremap k gk

" Filter command history.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Bootstrap vim-plug.
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme                         = 'base16'
let g:airline_left_sep                        = ''
let g:airline_right_sep                       = ''
let g:airline_section_y                       = ''
let g:airline#extensions#tabline#enabled      = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#branch#enabled       = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'w0rp/ale'

let g:ale_sign_warning='●'
let g:ale_sign_error='●'

let g:ale_linters = {}
let g:ale_linter_aliases = {}
let g:ale_fix_on_save = 1
let g:ale_fixers = {}

" Python.
let g:ale_python_mypy_options = '--ignore-missing-imports'

" Typescript.
let g:ale_linter_aliases = {'typescriptreact': 'typescript'}
let g:ale_linters['typescript'] = ['eslint', 'tslint']
let g:ale_fixers['typescript'] = ['prettier']
let g:ale_fixers['typescriptreact'] = ['prettier']
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma es5 --tab-width 4'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Base16.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'chriskempson/base16-vim'
function! s:base16_customize() abort
  call Base16hi("SpellCap",   "", "", "03", "00", "", "")
  call Base16hi("ALEWarningSign",   "", "", "03", "00", "", "")
  call Base16hi("SpellBad",   "", "", "01", "00", "", "")
  call Base16hi("ALEErrorSign",   "", "", "01", "00", "", "")

  call Base16hi("pythonInclude", "", "", "09", "", "", "")
  call Base16hi("pythonStatement", "", "", "02", "", "", "")
  call Base16hi("pythonDocstring", "", "", "06", "", "", "")
  call Base16hi("pythonExClass", "", "", "03", "", "", "")
  call Base16hi("pythonOperator", "", "", "01", "", "", "")
  call Base16hi("pythonConditional", "", "", "05", "", "", "")
  call Base16hi("pythonComment", "", "", "08", "", "italic", "")

  call Base16hi("yamlComment", "", "", "08", "", "italic", "")

  call Base16hi("vimComment", "", "", "08", "", "italic", "")
  call Base16hi("vimMapMod", "", "", "06", "", "", "")
  call Base16hi("vimBracket", "", "", "06", "", "", "")
  call Base16hi("vimCommand", "", "", "01", "", "", "")
  call Base16hi("vimVar", "", "", "06", "", "", "")
endfunction

augroup on_change_colorschema
  autocmd!
  autocmd ColorScheme * call s:base16_customize()
augroup END

" Print highlight group under cursor with leader + h.
map <leader>h :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto pairs.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'jiangmiao/auto-pairs'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Black.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'ambv/black'
" Run Black on save if file .black exists.
if filereadable('.black')
  autocmd BufWritePre *.py execute ':silent Black'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Docker.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'ekalinin/Dockerfile.vim'
autocmd Filetype Dockerfile setlocal tabstop=4 softtabstop=4 shiftwidth=0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fugitive.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim'

" Redefine :Ag command
function! s:ag_with_opts(arg, bang)
  let tokens  = split(a:arg)
  let ag_opts = join(filter(copy(tokens), 'v:val =~ "^-"'))
  let query   = join(filter(copy(tokens), 'v:val !~ "^-"'))
  call fzf#vim#ag(query, ag_opts, a:bang ? {} : {'down': '40%'})
endfunction

autocmd VimEnter * command! -nargs=* -bang Ag call s:ag_with_opts(<q-args>, <bang>0)

" Set fzf statusline color
function! s:fzf_statusline()
  highlight fzf1 ctermfg=yellow
  highlight fzf2 ctermfg=yellow
  highlight fzf3 ctermfg=yellow
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction
autocmd! User FzfStatusLine call <SID>fzf_statusline()

noremap <silent> <Leader><Leader> :silent FZF <CR>
" Search word under cursor with leader + a
nnoremap <silent> <leader>a :silent Ag -sw <C-r>=expand('<cword>')<CR><CR>
" Search visual selection with leader + a
vnoremap <silent> <leader>a y:silent Ag -sw <C-r>"<CR>

" Search tags in buffer by using leader + t
noremap <silent> <leader>t :silent BTags<CR>

" Search all tags by using leader + T
noremap <silent> <leader>T :silent Tags<CR>

" Search marks by using leader + m
noremap <silent> <leader>m :silent Marks<CR>

function! BufList()
    redir => ls
    silent ls
    redir END
    return split(ls, '\n')
endfunction

function! BufOpen(e)
    execute 'buffer '. matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader><Enter> :silent call fzf#run({
\   'source':      reverse(BufList()),
\   'sink':        function('BufOpen'),
\   'options':     '+m',
\   'tmux_height': '40%'
\ })<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Git gutter.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'airblade/vim-gitgutter'
highlight clear SignColumn

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Golang.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh' }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Goyo.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'junegunn/goyo.vim'
noremap <silent> <leader>g :Goyo<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gutentags.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'ludovicchabant/vim-gutentags'
noremap <Leader>c :GutentagsUpdate!<CR>
let g:gutentags_generate_on_empty_buffer = 1
let g:gutentags_ctags_exclude = [
  \ '.eggs',
  \ '.mypy_cache',
  \ 'build',
  \ 'venv',
\ ]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" JSX.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Multiple cursors.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'terryma/vim-multiple-cursors'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NCM.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'ncm2/ncm2'
Plug 'roxma/nvim-yarp'

" Enable ncm2 for all buffers.
autocmd BufEnter * call ncm2#enable_for_buffer()

" :help Ncm2PopupOpen for more information.
set completeopt=noinsert,menuone,noselect

" NOTE: you need to install completion sources to get completions. Check
" our wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-tmux'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-jedi'

" Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" LanguageServer client for NeoVim.
Plug 'autozimu/LanguageClient-neovim', {
  \ 'branch': 'next',
  \ 'do': 'bash install.sh',
  \ }

let g:LanguageClient_serverCommands = {
  \ 'ruby': [ 'solargraph',  'stdio' ],
  \ }

nnoremap <silent> <leader>ld :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <leader>lk :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> <leader>ln :call LanguageClient#textDocument_rename()<CR>
nnoremap <silent> <leader>lr :call LanguageClient#textDocument_references()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'scrooloose/nerdtree'
:command! NT NERDTreeToggle
:command! NTF NERDTreeFind
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeShowHidden=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Onedark.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'joshdick/onedark.vim'
let g:onedark_termcolors=16

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Parenthesis.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'junegunn/rainbow_parentheses.vim'
autocmd Filetype * RainbowParentheses
autocmd Filetype sls RainbowParentheses!
let g:rainbow#blacklist = [10, 11]
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Python.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Speed up Neovim start up.
let g:python_host_prog  = '/Users/zhsi/.pyenv/versions/2.7.14/bin/python2'
let g:python3_host_prog = '/Users/zhsi/.pyenv/versions/3.6.5/bin/python3'

Plug 'klen/python-mode'
let g:pymode_folding = 0
let g:pymode_lint = 0
let g:pymode_motion = 0
let g:pymode_options_colorcolumn = 0
let g:pymode_rope = 0
let g:pymode_rope_completion = 0

Plug 'fisadev/vim-isort'
if filereadable('.black')
  autocmd BufWritePre *.py execute ':Isort'
endif

Plug 'davidhalter/jedi-vim'
let g:jedi#completions_enabled = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Repeat.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-repeat'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ruby.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-endwise'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rust.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'racer-rust/vim-racer'
Plug 'rust-lang/rust.vim'
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Solarized.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'altercation/vim-colors-solarized'

"   option name                         default      optional
"   --------------------------------------------------------------
let g:solarized_termcolors = 16       " 16       |   256
let g:solarized_termtrans  = 0        " 0        |   1
let g:solarized_degrade    = 0        " 0        |   1
let g:solarized_bold       = 1        " 1        |   0
let g:solarized_underline  = 1        " 1        |   0
let g:solarized_italic     = 1        " 1        |   0
let g:solarized_contrast   = 'normal' " 'normal' |   'high' or 'low'
let g:solarized_visibility = 'normal' " 'normal' |   'high' or 'low'
let g:solarized_hitrail    = 1        " 0        |   1
let g:solarized_menu       = 1        " 1        |   0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Surround.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-surround'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabular.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'godlygeek/tabular'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tagbar.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'majutsushi/tagbar'
:command! TT TagbarToggle

" Add support for markdown files in tagbar.
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : 'markdown2ctags',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tcomment.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tomtom/tcomment_vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Terraform
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'hashivim/vim-terraform'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tmux.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'christoomey/vim-tmux-navigator'
Plug 'sjl/vitality.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Typescript.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Syntax.
Plug 'HerringtonDarkholme/yats.vim'

" Completion.
Plug 'mhartington/nvim-typescript', { 'do': './install.sh' }
autocmd FileType typescript nnoremap <buffer> <leader>d :TSTypeDef<CR>
autocmd FileType typescript nnoremap <buffer> <C-]> :TSDef<CR>
autocmd FileType typescript nnoremap <buffer> K :TSDoc<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Undo.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'mbbill/undotree'
noremap <silent> <leader>u :UndotreeToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Unimpaired.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-unimpaired'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Languages (non-Python).
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'bfontaine/Brewfile.vim'
Plug 'burnettk/vim-angular'
Plug 'cespare/vim-toml'
Plug 'keith/swift.vim'
Plug 'keith/tmux.vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'pangloss/vim-javascript'
Plug 'saltstack/salt-vim'

call plug#end()

if $BACKGROUND == "light"
  colorscheme base16-default-light
  set background=light
else
  colorscheme base16-default-dark
  set background=dark
endif

" Italic comments.
highlight Comment cterm=italic
" clear background for line numbers
highlight LineNr ctermbg=0
