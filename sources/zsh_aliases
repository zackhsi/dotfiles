###############################################################################
# Python
###############################################################################
function venv() {
  virtualenv venv
  source venv/bin/activate
}
function pyc() {
  find . -name "*.pyc" -delete
}


###############################################################################
# Git
###############################################################################
alias pr="hub pull-request"
alias gbc="git branch | grep -v master | xargs git branch -d"
alias grev='git rev-parse HEAD'
# Clone Lyft repo
cl() {
  hub clone lyft/$@
}


###############################################################################
# OSX
###############################################################################
alias airport="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport"

###############################################################################
# Directories
###############################################################################
alias h="~/homespace"
alias s="$SRC"
alias dot="~/homespace/dotfiles"

alias dev="$SRC/devbox"
alias o="$SRC/ops"


###############################################################################
# Fabric
###############################################################################
export CACHE_EC2_INSTANCES=1
function mfa() {
  pushd $SRC/ops/orca/ > /dev/null
  source mfa.sh --role admin
  popd > /dev/null
}
function f() {
  (cd $SRC/ops/hacktools/ && ./fab.sh $@)
}
function fssh() {
  (cd $SRC/ops/hacktools/ && ./fssh $@)
}
PATH=$PATH:~/bin
if [ ! -d ~/bin ]; then
  echo "Creating ~/bin directory"
  mkdir ~/bin
fi
if [ ! -L ~/bin/fab ]; then
  echo "Linking fab tool"
  ln -s $SRC/ops/hacktools/fab.sh ~/bin/fab
fi


###############################################################################
# AWS
###############################################################################

# term i-d2609352
# term -f i-d2609352
function term() {
  if [[ $1 == "-f" ]]; then
    shift
    aws ec2 stop-instances --instance-ids $@ --force
  else
    aws ec2 stop-instances --instance-ids $@
  fi
}

function describe() {
  xargs -P 50 -I % aws ec2 describe-instances --instance-ids %
}

function summarize() {
  jq '.Reservations[0].Instances[0]' | jq '.InstanceId, .State.Name, .InstanceType'
}

function itype() {
  jq '.Reservations[0].Instances[0].InstanceType'
}

function state() {
  jq '.Reservations[0].Instances[0].State.Name'
}

# ASG functions
function asg_ssh() {
  aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$1" \
    | jq ".AutoScalingGroups[0].Instances | .[].InstanceId" \
    | xargs -I % tmux split-window "tmux select-layout tiled && ssh -oStrictHostKeyChecking=no %"
}
function asg_term_decrement() {
  aws autoscaling terminate-instance-in-auto-scaling-group --instance-id $1 --should-decrement-desired-capacity
}
function asg_term_no_decrement() {
  aws autoscaling terminate-instance-in-auto-scaling-group --instance-id $1 --no-should-decrement-desired-capacity
}
function asg_ls() {
  aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$1" \
    | jq ".AutoScalingGroups[0].Instances | .[].InstanceId" \
    | sort
}
function asg_ll() {
  aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "$1" \
    | jq ".AutoScalingGroups[0].Instances | .[]" \
    | sort
}
