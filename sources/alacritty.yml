# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use 'alacritty' if it is
  # available, otherwise 'xterm-256color' is used.
  # TERM: xterm-256color-italic

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 0
    lines: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Available values:
  # - `full`: Window with title bar and title bar buttons
  # - `none`: Window without title bar, rounded corners, or drop shadow
  # - `transparent`: Window with title bar with transparent background and title
  #   bar buttons
  # - `buttonless`: Window with title bar with transparent background and no
  #   title bar buttons
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: none

  # When true, alacritty starts maximized.
  start_maximized: false

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

  # Faux Scrolling
  #
  # The `faux_multiplier` setting controls the number of lines the terminal
  # should scroll when the alternate screen buffer is active. This is used
  # to allow mouse scrolling for applications like `man`.
  #
  # Specifying `0` will disable faux scrolling.
  faux_multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  auto_scroll: false

# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
tabspaces: 4

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Operator Mono
    # The `style` can be specified to pick a specific face.
    style: Book

  # The bold font face
  bold:
    family: Operator Mono
    # The `style` can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: Operator Mono
    # The `style` can be specified to pick a specific face.
    style: Book Italic

  # Point size
  size: 15.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (OS X only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  use_thin_strokes: true

# Display the time it takes to redraw each frame.
render_timer: false

# Keep the log file after quitting Alacritty.
persistent_logging: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

custom_cursor_colors: true

# Colors (base16-orbital)
colors:
  # Default colors
  primary:
    background: '0xf7f8f9'  # Terminal background.
    foreground: '0x333333'  # Terminal text

  # Cursor colors
  cursor:
    text: '0xf7f8f9'
    cursor: '0x333333'

  # Normal colors
  normal:
    black:   '0xf7f8f9'  # Vim background.
    red:     '0xdd2c67'
    green:   '0x24b47e'
    yellow:  '0xf79a59'
    blue:    '0x2191ef'
    magenta: '0x6772e5'
    cyan:    '0x45b2e8'
    white:   '0x333333'  # Vim text.

  # Bright colors
  bright:
    black:   '0x6b7c93'  # Vim line numbers, comments.
    red:     '0xfa755a'
    green:   '0xeceff1'  # Current line, color column.
    yellow:  '0xccd4e0'  # Vim pane borders, visual selection.
    blue:    '0x000000'  # Unused.
    magenta: '0x000000'  # Unused.
    cyan:    '0x217ab7'  # Special chars (YAML escape).
    white:   '0x000000'  # Unused.

# Colors (base16-onedark)
colors_onedark:
  # Default colors
  primary:
    background: '0x282c34'  # Terminal background.
    foreground: '0xabb2bf'  # Terminal text.

  cursor:
    text: '0x282c34'
    cursor: '0xabb2bf'

  # Normal colors
  normal:
    black:   '0x282c34'  # Vim background.
    red:     '0xe06c75'
    green:   '0x98c379'
    yellow:  '0xe5c07b'
    blue:    '0x5ecaed'
    magenta: '0xc678dd'
    cyan:    '0x56b6c2'
    white:   '0xabb2bf'  # Airline git branch.

  # Bright colors
  bright:
    black:   '0x636c83'  # Comments, line number background.
    red:     '0xd19a66'  # Parens, ints.
    green:   '0x4b5263'  # Current line, color column.
    yellow:  '0x434959'  # Airline background vim mode, visual selection.
    blue:    '0x86dcf8'  # FZF search term current line.
    magenta: '0xc678dd'  # Git diff file position.
    cyan:    '0xb3f8ff'  # Curly braces.
    white:   '0xb3b3b3'  # Curly braces.

# Colors (ayu)
colors_off:
  # Default colors
  primary:
    background: '0x1f2430'  # Terminal background.
    foreground: '0xcbccc6'  # Terminal text.

  cursor:
    text: '0x1f2430'
    cursor: '0xFA86DF'

  # Normal colors
  normal:
    black:   '0x1f2430'  # Vim background.
    red:     '0xf28779'
    green:   '0xbae67e'
    yellow:  '0xffd580'
    blue:    '0x73d0ff'
    magenta: '0xd4bfff'
    cyan:    '0x95e6cb'
    white:   '0xcbccc6'  # Vim text, airline git branch.

  # Bright colors
  bright:
    black:   '0x5c6773'  # Comments, line number background.
    red:     '0x5ccfe6'  # Parens, ints.
    green:   '0x2a3546'  # Color column.
    yellow:  '0x313e52'  # Airline background vim mode, visual selection.
    blue:    '0x86dcf8'  # FZF search term current line.
    magenta: '0xc678dd'  # Git diff file position.
    cyan:    '0xb3f8ff'  # Curly braces.
    white:   '0xb3b3b3'  # Curly braces.

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>-/."

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

dynamic_title: true

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Beam

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.

shell:
  program: /usr/local/bin/bash
  args:
    - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Paste,                   action: Paste                        }
  - { key: Copy,                    action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                   }
  - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                   }
  - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                   }
  - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                   }
  - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                  }
  - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                  }
  - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                  }
  - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                  }
  - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                  }
  - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                  }
  - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                  }
  - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                  }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
  - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                   }
  - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                   }
  - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                   }
  - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                   }
  - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                  }
  - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                  }
  - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                  }
  - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                  }
  - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                  }
  - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                  }
  - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                  }
  - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                  }
  - { key: F1,       mods: Command, chars: "\x1b[1;3P"                   }
  - { key: F2,       mods: Command, chars: "\x1b[1;3Q"                   }
  - { key: F3,       mods: Command, chars: "\x1b[1;3R"                   }
  - { key: F4,       mods: Command, chars: "\x1b[1;3S"                   }
  - { key: F5,       mods: Command, chars: "\x1b[15;3~"                  }
  - { key: F6,       mods: Command, chars: "\x1b[17;3~"                  }
  - { key: F7,       mods: Command, chars: "\x1b[18;3~"                  }
  - { key: F8,       mods: Command, chars: "\x1b[19;3~"                  }
  - { key: F9,       mods: Command, chars: "\x1b[20;3~"                  }
  - { key: F10,      mods: Command, chars: "\x1b[21;3~"                  }
  - { key: F11,      mods: Command, chars: "\x1b[23;3~"                  }
  - { key: F12,      mods: Command, chars: "\x1b[24;3~"                  }

  # Custom motion.
  - { key: Back,     mods: Command,         chars: "\x15"                }
  - { key: Back,     mods: Alt,             chars: "\x17"                }
  - { key: Left,     mods: Control|Shift,   chars: "\x1b[1;6D"           }
  - { key: Right,    mods: Control|Shift,   chars: "\x1b[1;6C"           }
  - { key: B,        mods: Control|Alt,     chars: "b"                 }
  - { key: F,        mods: Control|Alt,     chars: "f"                 }


  # Option as meta.
  # https://github.com/jwilm/alacritty/issues/62#issuecomment-347552058
  - { key: A,        mods: Alt,             chars: "\x1ba"               }
  - { key: B,        mods: Alt,             chars: "\x1bb"               }
  - { key: C,        mods: Alt,             chars: "\x1bc"               }
  - { key: D,        mods: Alt,             chars: "\x1bd"               }
  - { key: E,        mods: Alt,             chars: "\x1be"               }
  - { key: F,        mods: Alt,             chars: "\x1bf"               }
  - { key: G,        mods: Alt,             chars: "\x1bg"               }
  - { key: H,        mods: Alt,             chars: "\x1bh"               }
  - { key: I,        mods: Alt,             chars: "\x1bi"               }
  - { key: J,        mods: Alt,             chars: "\x1bj"               }
  - { key: K,        mods: Alt,             chars: "\x1bk"               }
  - { key: L,        mods: Alt,             chars: "\x1bl"               }
  - { key: M,        mods: Alt,             chars: "\x1bm"               }
  - { key: N,        mods: Alt,             chars: "\x1bn"               }
  - { key: O,        mods: Alt,             chars: "\x1bo"               }
  - { key: P,        mods: Alt,             chars: "\x1bp"               }
  - { key: Q,        mods: Alt,             chars: "\x1bq"               }
  - { key: R,        mods: Alt,             chars: "\x1br"               }
  - { key: S,        mods: Alt,             chars: "\x1bs"               }
  - { key: T,        mods: Alt,             chars: "\x1bt"               }
  - { key: U,        mods: Alt,             chars: "\x1bu"               }
  - { key: V,        mods: Alt,             chars: "\x1bv"               }
  - { key: W,        mods: Alt,             chars: "\x1bw"               }
  - { key: X,        mods: Alt,             chars: "\x1bx"               }
  - { key: Y,        mods: Alt,             chars: "\x1by"               }
  - { key: Z,        mods: Alt,             chars: "\x1bz"               }
  - { key: A,        mods: Alt|Shift,       chars: "\x1bA"               }
  - { key: B,        mods: Alt|Shift,       chars: "\x1bB"               }
  - { key: C,        mods: Alt|Shift,       chars: "\x1bC"               }
  - { key: D,        mods: Alt|Shift,       chars: "\x1bD"               }
  - { key: E,        mods: Alt|Shift,       chars: "\x1bE"               }
  - { key: F,        mods: Alt|Shift,       chars: "\x1bF"               }
  - { key: G,        mods: Alt|Shift,       chars: "\x1bG"               }
  - { key: H,        mods: Alt|Shift,       chars: "\x1bH"               }
  - { key: I,        mods: Alt|Shift,       chars: "\x1bI"               }
  - { key: J,        mods: Alt|Shift,       chars: "\x1bJ"               }
  - { key: K,        mods: Alt|Shift,       chars: "\x1bK"               }
  - { key: L,        mods: Alt|Shift,       chars: "\x1bL"               }
  - { key: M,        mods: Alt|Shift,       chars: "\x1bM"               }
  - { key: N,        mods: Alt|Shift,       chars: "\x1bN"               }
  - { key: O,        mods: Alt|Shift,       chars: "\x1bO"               }
  - { key: P,        mods: Alt|Shift,       chars: "\x1bP"               }
  - { key: Q,        mods: Alt|Shift,       chars: "\x1bQ"               }
  - { key: R,        mods: Alt|Shift,       chars: "\x1bR"               }
  - { key: S,        mods: Alt|Shift,       chars: "\x1bS"               }
  - { key: T,        mods: Alt|Shift,       chars: "\x1bT"               }
  - { key: U,        mods: Alt|Shift,       chars: "\x1bU"               }
  - { key: V,        mods: Alt|Shift,       chars: "\x1bV"               }
  - { key: W,        mods: Alt|Shift,       chars: "\x1bW"               }
  - { key: X,        mods: Alt|Shift,       chars: "\x1bX"               }
  - { key: Y,        mods: Alt|Shift,       chars: "\x1bY"               }
  - { key: Z,        mods: Alt|Shift,       chars: "\x1bZ"               }
